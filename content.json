[{"title":"Javascript数据类型","date":"2018-12-03T01:27:04.000Z","path":"2018/12/03/jsdata1/","text":"1.区分大小写 Html/css不区分大小写，Html.data属性，名字会自动转小写，类似 JQuery.data() 方法 2.变量var定义 局部变量：不可被删除；变量可被提前；不用var 全局变量（window一个属性）：可被删除（对象的属性可以被删除）；不可提前（属性是无序的） 3.数据类型基础数据类型 原始数据类型/不可改变数据类型对象 复杂数据类型/可变数据类型、可使用属性、方法 4. typeof是操作符，返回值都是字符串typeof(null) // object 5.undefined、null、NaNundefined 一个变量已定义，但是没有值 typeof未初始化，未声明变量，会返回该值null 空指针对象 undefined == null //trueNaN 是数值，不等于任何数值 NaN == NaN //false .tg {border-collapse:collapse;border-spacing:0;} .tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;} .tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;} .tg .tg-c6of{background-color:#ffffff;border-color:inherit;text-align:left;vertical-align:top} .tg .tg-3xi5{background-color:#ffffff;border-color:inherit;text-align:center;vertical-align:top} undefinednull相同点都只有一个值，参与判断返回false,不能调用方法 不同点不是关键字是关键字是属性，值叫“未定义”对象，空的未初始化已初始化typeof返回undefinedtypeof返回object转数字结果为NaN转数字结果为0 6.Boolean 对一个变量使用Boolean，相当于使用!!6种数据转Boolean为false：undefined, null, 0, -0, &quot;&quot;, NaN[], {} 转Boolean为true 7.Number包括常规数字，无穷， NaN对于常规数字，尽量用十进制，少用十六进制，不用八进制十进制 数字范围：1-2^&#123;53&#125; - 2^&#123;53&#125; 八进制 严格模式下无效浮点数 计算机中，所有数字都是二进制，不是所有小数都能用二进制表示。（只能表示小数点后52位）永远不要比较小数，如果一定要比较，乘以10的倍数转成整数再比较 除以0 正常情况下返回Infinity/-Infinity; 0/0 -&gt; NaNIsNaN() 判断传入的值是否可以转为数字 8.数值转换几种特殊数据转换：Number(undefined) -&gt; NaNNumber(null) -&gt; 0Number(&quot;&quot;) -&gt; 0Number([]) -&gt; 0Number({}) -&gt; NaNNumber() 适用任何类型parseInt() 适用于字符串parseFloat() 适用于字符串在使用parseInt(), parseFloat()，尽量使用“10”做第二个参数，代表传进来的第一个参数是用什么表示的。","categories":[{"name":"js","slug":"js","permalink":"http://taoliqiqi.github.io/categories/js/"}],"tags":[{"name":"js","slug":"js","permalink":"http://taoliqiqi.github.io/tags/js/"}]},{"title":"angular-ZERO","date":"2018-02-18T03:05:08.000Z","path":"2018/02/18/angular-ZERO/","text":"1.Input reference这里引用的是input对象 ，我们如果想传递input的值，可以用usernameRef.value ，然后就可以把 onClick() 方法改成 onClick(usernameRef.value) 12&lt;input #usernameRef type=&quot;text&quot;&gt;&lt;button (click)=&quot;onClick(usernameRef.value)&quot;&gt;Login&lt;/button&gt; 2.Dependency Inject Service如果不使用 DI（依赖性注入) 的时候，我们自然的想法是这样的，在 login.component.ts 中 import 引入 AuthService，在构造中 初始化 service ，在 onClick 中 调用 service 。123456789101112131415161718192021222324252627282930313233import &#123; Component, OnInit &#125; from '@angular/core';//引入AuthServiceimport &#123; AuthService &#125; from '../core/auth.service';@Component(&#123; selector: 'app-login', template: ` &lt;div&gt; &lt;input #usernameRef type=\"text\"&gt; &lt;input #passwordRef type=\"password\"&gt; &lt;button (click)=\"onClick(usernameRef.value, passwordRef.value)\"&gt;Login&lt;/button&gt; &lt;/div&gt; `, styles: []&#125;)export class LoginComponent implements OnInit &#123; //声明成员变量，其类型为AuthService service: AuthService; constructor() &#123; this.service = new AuthService(); &#125; ngOnInit() &#123; &#125; onClick(username, password) &#123; //调用service的方法 console.log('auth result is: ' + this.service.loginWithCredentials(username, password)); &#125;&#125; 这么做呢也可以跑起来，但存在几个问题： 由于实例化是在组件中进行的，意味着我们如果更改service的构造函数的话，组件也需要更改。 如果我们以后需要开发、测试和生产环境配置不同的AuthService，以这种方式实现会非常不方便。 使用依赖注入 使用 import (providers:[AuthService]) 123456789101112131415161718192021222324252627282930import &#123; Component, OnInit &#125; from '@angular/core';import &#123; AuthService &#125; from '../core/auth.service';@Component(&#123; selector: 'app-login', template: ` &lt;div&gt; &lt;input #usernameRef type=\"text\"&gt; &lt;input #passwordRef type=\"password\"&gt; &lt;button (click)=\"onClick(usernameRef.value, passwordRef.value)\"&gt;Login&lt;/button&gt; &lt;/div&gt; `, styles: [], //在providers中配置AuthService providers:[AuthService]&#125;)export class LoginComponent implements OnInit &#123; //在构造函数中将AuthService示例注入到成员变量service中 //而且我们不需要显式声明成员变量service了 constructor(private service: AuthService) &#123; &#125; ngOnInit() &#123; &#125; onClick(username, password) &#123; console.log('auth result is: ' + this.service.loginWithCredentials(username, password)); &#125;&#125; 不import service In app.module.ts 123providers: [ &#123;provide: 'auth', useClass: AuthService&#125; ] In login.component.ts 12constructor(@Inject('auth') private service) &#123; &#125; 3.数据绑定 image 4.建立模拟web服务和异步操作1npm install --save angular-in-memory-web-api 创建src\\app\\todo\\todo-data.ts 123456789101112import &#123; InMemoryDbService &#125; from 'angular-in-memory-web-api';import &#123; Todo &#125; from './todo.model';export class InMemoryTodoDbService implements InMemoryDbService &#123; createDb() &#123; let todos: Todo[] = [ &#123;id: \"f823b191-7799-438d-8d78-fcb1e468fc78\", desc: 'Getting up', completed: true&#125;, &#123;id: \"c316a3bf-b053-71f9-18a3-0073c7ee3b76\", desc: 'Go to school', completed: false&#125; ]; return &#123;todos&#125;; &#125;&#125;","categories":[{"name":"Angular","slug":"Angular","permalink":"http://taoliqiqi.github.io/categories/Angular/"}],"tags":[{"name":"angular","slug":"angular","permalink":"http://taoliqiqi.github.io/tags/angular/"}]},{"title":"http-chapter1","date":"2018-02-11T06:27:04.000Z","path":"2018/02/11/http-chapter1/","text":"1.1 使用HTTP协议访问Web image Web浏览器从Web服务器端获取文件资源(resource)，从而显示Web页面。 image 通过发送请求获取服务器资源的Web浏览器等，都可称为客户端(client)。 一些定义 1234HTTP（HyperText Transfer Protocol) 超文本传输协议HTML（HyperText Markup Language) 超文本标记语言WWW（World Wide Web) 万维网URL（Uniform Resource Locator) 统一资源定位符 1.2 TCP/IP协议 定义 12345TCP/IP 是互联网相关的各类协议族的总称。HTTP 属于它内部的一个子集。Protocol:计算机与网络设备相互通信的规则，称为协议。 1.2.1 TCP/IP的分层管理TCP/IP 协议族按层次分别分为以下 4层：应用层、传输层、网络层和数据链路层。 应用层：决定了向用户提供应用服务时通信的活动。FTP（File Transfer Protocol，文件传输协议），DNS（Domain Name System，域名系统），HTTP协议。 传输层：提供处于网络连接中的两台计算机之间的数据传输。TCP（Transmission Control Protocol，传输控制协议）和 UDP（User Data Protocol，用户数据报协议）。 网络层：处理在网络上流动的数据包（网络传输的最小数据单位）。该层规定了通过怎样的路径（所谓的传输路线）到达对方计算机，并把数据包传送给对方。 数据链路层：处理连接网络的硬件部分。包括控制操作系统、硬件的设备驱动、NIC（Network Interface Card，网络适配器，即网卡），及光纤等物理可见部分（还包括连接器等一切传输媒介）。","categories":[{"name":"Http","slug":"Http","permalink":"http://taoliqiqi.github.io/categories/Http/"}],"tags":[{"name":"http","slug":"http","permalink":"http://taoliqiqi.github.io/tags/http/"}]},{"title":"Hello Hexo","date":"2017-11-20T16:02:10.000Z","path":"2017/11/21/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://taoliqiqi.github.io/categories/Hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://taoliqiqi.github.io/tags/hexo/"}]}]